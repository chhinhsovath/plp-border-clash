// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User and Authentication
model User {
  id              String    @id @default(cuid())
  email           String    @unique
  password        String
  firstName       String
  lastName        String
  role            UserRole  @default(VIEWER)
  isActive        Boolean   @default(true)
  emailVerified   Boolean   @default(false)
  mfaEnabled      Boolean   @default(false)
  mfaSecret       String?
  lastLogin       DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  organization    Organization @relation(fields: [organizationId], references: [id])
  organizationId  String
  
  // Audit logs
  auditLogs       AuditLog[]
  
  // Reports
  reports         Report[]
  
  // Assessments
  assessments     Assessment[]
  
  // Shelter assessments
  shelterAssessments ShelterAssessment[]
  
  // WASH assessments
  washAssessments WashAssessment[]
  
  // Health records
  healthRecords   HealthRecord[]
  
  // Protection incidents
  protectionIncidents ProtectionIncident[]
  
  // Nutrition assessments
  nutritionAssessments NutritionAssessment[]
  
  // Education enrollments
  educationEnrollments EducationEnrollment[]
  
  // Distribution records
  distributionRecords DistributionRecord[]
}

enum UserRole {
  ADMIN
  DATA_ENTRY
  VIEWER
  MANAGER
  FIELD_OFFICER
}

// Organization
model Organization {
  id              String    @id @default(cuid())
  name            String
  type            String
  country         String
  contactEmail    String
  contactPhone    String
  address         String?
  website         String?
  isActive        Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  users           User[]
  sites           Site[]
  reports         Report[]
}

// Site/Location
model Site {
  id              String    @id @default(cuid())
  name            String
  type            String    // Camp, Settlement, Host Community
  location        String
  coordinates     String?
  population      Int?
  households      Int?
  description     String?
  isActive        Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  organization    Organization @relation(fields: [organizationId], references: [id])
  organizationId  String
  assessments     Assessment[]
  households_site Household[]
  individuals     Individual[]
}

// Household Registration
model Household {
  id                String    @id @default(cuid())
  householdCode     String    @unique
  registrationDate  DateTime  @default(now())
  size              Int
  headOfHousehold   String?
  contactNumber     String?
  address           String?
  vulnerability     String?   // High, Medium, Low
  notes             String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Relations
  site              Site?     @relation(fields: [siteId], references: [id])
  siteId            String?
  individuals       Individual[]
  distributionRecords DistributionRecord[]
}

// Individual Registration
model Individual {
  id                String    @id @default(cuid())
  individualCode    String    @unique
  fullLegalName     String
  dateOfBirth       DateTime
  age               Int
  gender            String
  nationality       String?
  documentType      String?   // ID, Passport, Birth Certificate
  documentNumber    String?
  phoneNumber       String?
  isHeadOfHousehold Boolean   @default(false)
  vulnerabilities   String?   // JSON array of vulnerabilities
  specialNeeds      String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Relations
  household         Household? @relation(fields: [householdId], references: [id])
  householdId       String?
  site              Site?      @relation(fields: [siteId], references: [id])
  siteId            String?
  
  // Health records
  healthRecords     HealthRecord[]
  
  // Protection incidents
  victimIncidents   ProtectionIncident[] @relation("VictimIncidents")
  perpetratorIncidents ProtectionIncident[] @relation("PerpetratorIncidents")
  
  // Nutrition assessments
  nutritionAssessments NutritionAssessment[]
  
  // Education enrollments
  educationEnrollments EducationEnrollment[]
}

// Assessment
model Assessment {
  id              String    @id @default(cuid())
  type            String    // Rapid, Detailed, Monitoring
  sector          String    // Health, WASH, Shelter, Protection, etc.
  status          String    @default("DRAFT") // DRAFT, IN_PROGRESS, COMPLETED, APPROVED
  assessmentDate  DateTime  @default(now())
  location        String?
  gpsCoordinates  String?
  summary         String?
  recommendations String?
  data            String    // JSON data
  attachments     String?   // JSON array of file paths
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  site            Site?     @relation(fields: [siteId], references: [id])
  siteId          String?
  author          User      @relation(fields: [authorId], references: [id])
  authorId        String
}

// Shelter Assessment
model ShelterAssessment {
  id                String    @id @default(cuid())
  assessmentDate    DateTime  @default(now())
  location          String
  shelterType       String    // Tent, Building, Makeshift, etc.
  condition         String    // Good, Damaged, Critical
  occupancy         Int
  maxCapacity       Int
  needsRepair       Boolean   @default(false)
  repairDetails     String?
  materialsNeeded   String?   // JSON array
  winterized        Boolean   @default(false)
  electricity       Boolean   @default(false)
  waterAccess       Boolean   @default(false)
  sanitationAccess  Boolean   @default(false)
  photos            String?   // JSON array of photo URLs
  notes             String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Relations
  assessor          User      @relation(fields: [assessorId], references: [id])
  assessorId        String
}

// WASH Assessment
model WashAssessment {
  id                   String    @id @default(cuid())
  assessmentDate       DateTime  @default(now())
  location             String
  
  // Water
  waterSourceType      String?   // Well, Spring, River, Piped, etc.
  waterQuality         String?   // Good, Acceptable, Poor
  waterQuantity        Float?    // Liters per person per day
  waterAccessTime      Int?      // Minutes to water source
  waterTreatment       Boolean   @default(false)
  treatmentMethod      String?
  
  // Sanitation
  latrineType          String?   // Pit, Flush, Chemical, etc.
  latrineCount         Int?
  latrineCondition     String?   // Good, Needs maintenance, Critical
  peoplePerLatrine     Int?
  handwashingFacility  Boolean   @default(false)
  soapAvailable        Boolean   @default(false)
  
  // Hygiene
  hygienePromotion     Boolean   @default(false)
  wasteManagement      String?   // Good, Acceptable, Poor
  drainageSystem       String?   // Good, Blocked, None
  
  recommendations      String?
  urgentNeeds          String?
  photos               String?   // JSON array
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  
  // Relations
  assessor             User      @relation(fields: [assessorId], references: [id])
  assessorId           String
}

// Health Record
model HealthRecord {
  id                String    @id @default(cuid())
  visitDate         DateTime  @default(now())
  visitType         String    // Consultation, Emergency, Follow-up
  chiefComplaint    String?
  symptoms          String?   // JSON array
  diagnosis         String?
  treatment         String?
  prescriptions     String?   // JSON array
  referralNeeded    Boolean   @default(false)
  referralTo        String?
  referralReason    String?
  followUpDate      DateTime?
  vitalSigns        String?   // JSON object
  immunizations     String?   // JSON array
  allergies         String?
  chronicConditions String?
  notes             String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Relations
  individual        Individual @relation(fields: [individualId], references: [id])
  individualId      String
  provider          User       @relation(fields: [providerId], references: [id])
  providerId        String
}

// Protection Incident
model ProtectionIncident {
  id                String    @id @default(cuid())
  incidentDate      DateTime
  incidentType      String    // SGBV, Child Protection, Trafficking, etc.
  location          String
  description       String
  immediateAction   String?
  referralMade      Boolean   @default(false)
  referralTo        String?
  followUpRequired  Boolean   @default(false)
  followUpDate      DateTime?
  status            String    @default("REPORTED") // REPORTED, UNDER_INVESTIGATION, RESOLVED, CLOSED
  confidential      Boolean   @default(true)
  consentObtained   Boolean   @default(false)
  supportProvided   String?   // JSON array
  notes             String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Relations
  victim            Individual? @relation("VictimIncidents", fields: [victimId], references: [id])
  victimId          String?
  perpetrator       Individual? @relation("PerpetratorIncidents", fields: [perpetratorId], references: [id])
  perpetratorId     String?
  reporter          User        @relation(fields: [reporterId], references: [id])
  reporterId        String
}

// Nutrition Assessment
model NutritionAssessment {
  id                String    @id @default(cuid())
  assessmentDate    DateTime  @default(now())
  
  // Anthropometric measurements
  weight            Float     // kg
  height            Float     // cm
  muacScore         Float?    // Mid-Upper Arm Circumference in mm
  edema             Boolean   @default(false)
  
  // Calculated indicators
  weightForAge      String?   // Z-score
  heightForAge      String?   // Z-score
  weightForHeight   String?   // Z-score
  bmi               Float?
  
  // Status
  nutritionStatus   String    // Normal, MAM, SAM
  appetiteTest      String?   // Pass/Fail
  medicalComplications Boolean @default(false)
  complicationDetails String?
  
  // Treatment
  enrolled          Boolean   @default(false)
  programType       String?   // OTP, SFP, etc.
  admissionDate     DateTime?
  dischargeDate     DateTime?
  dischargeStatus   String?   // Cured, Defaulter, Death, etc.
  
  notes             String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Relations
  individual        Individual @relation(fields: [individualId], references: [id])
  individualId      String
  assessor          User       @relation(fields: [assessorId], references: [id])
  assessorId        String
}

// Education Enrollment
model EducationEnrollment {
  id                String    @id @default(cuid())
  enrollmentDate    DateTime  @default(now())
  academicYear      String
  schoolName        String?
  gradeLevel        String
  enrollmentStatus  String    // Enrolled, Dropped Out, Graduated
  attendance        Float?    // Percentage
  performance       String?   // Excellent, Good, Average, Poor
  supportNeeded     String?   // JSON array
  barriersToEducation String? // JSON array
  notes             String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Relations
  student           Individual @relation(fields: [studentId], references: [id])
  studentId         String
  enrolledBy        User       @relation(fields: [enrolledById], references: [id])
  enrolledById      String
}

// Distribution Record
model DistributionRecord {
  id                String    @id @default(cuid())
  distributionDate  DateTime  @default(now())
  distributionType  String    // Food, NFI, Cash, Voucher
  items             String    // JSON array of items and quantities
  totalValue        Float?
  collectorName     String
  collectorIdNumber String?
  verificationMethod String?  // Signature, Fingerprint, Photo
  verified          Boolean   @default(false)
  notes             String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Relations
  household         Household  @relation(fields: [householdId], references: [id])
  householdId       String
  distributedBy     User       @relation(fields: [distributedById], references: [id])
  distributedById   String
}

// Report
model Report {
  id                    String    @id @default(cuid())
  title                 String
  type                  String    // Situation Report, Assessment, Monthly, etc.
  status                String    @default("DRAFT") // DRAFT, IN_REVIEW, PUBLISHED
  reportingPeriodStart  DateTime
  reportingPeriodEnd    DateTime
  sectors               String    // JSON array
  summary               String?
  content               String    // Rich text or markdown
  data                  String?   // JSON data
  recommendations       String?
  attachments           String?   // JSON array
  publishedAt           DateTime?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  
  // Relations
  author                User      @relation(fields: [authorId], references: [id])
  authorId              String
  organization          Organization @relation(fields: [organizationId], references: [id])
  organizationId        String
}

// Audit Log
model AuditLog {
  id          String    @id @default(cuid())
  action      String    // CREATE, UPDATE, DELETE, VIEW, EXPORT
  entity      String    // User, Assessment, Report, etc.
  entityId    String
  details     String?   // JSON with old and new values
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime  @default(now())
  
  // Relations
  user        User      @relation(fields: [userId], references: [id])
  userId      String
}